{"remainingRequest":"/Users/deniz/Developer/Ang/singing-potato/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deniz/Developer/Ang/singing-potato/node_modules/angular-froala-wysiwyg/editor/editor.directive.js","dependencies":[{"path":"/Users/deniz/Developer/Ang/singing-potato/node_modules/angular-froala-wysiwyg/editor/editor.directive.js","mtime":1529794890000},{"path":"/Users/deniz/Developer/Ang/singing-potato/node_modules/cache-loader/dist/cjs.js","mtime":1531652261806},{"path":"/Users/deniz/Developer/Ang/singing-potato/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Output, forwardRef } from '@angular/core';\nvar FroalaEditorDirective = /*@__PURE__*/ (function () {\n    function FroalaEditorDirective(el, zone) {\n        this.zone = zone;\n        // editor options\n        this._opts = {\n            immediateAngularModelUpdate: false,\n            angularIgnoreAttrs: null\n        };\n        this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];\n        this.INNER_HTML_ATTR = 'innerHTML';\n        this._hasSpecialTag = false;\n        this._listeningEvents = [];\n        this._editorInitialized = false;\n        this._oldModel = null;\n        // Begin ControlValueAccesor methods.\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        // froalaModel directive as output: update model if editor contentChanged\n        this.froalaModelChange = new EventEmitter();\n        // froalaInit directive as output: send manual editor initialization\n        this.froalaInit = new EventEmitter();\n        var element = el.nativeElement;\n        // check if the element is a special tag\n        if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n            this._hasSpecialTag = true;\n        }\n        // jquery wrap and store element\n        this._$element = $(element);\n        this.zone = zone;\n    }\n    // Form model content changed.\n    // Form model content changed.\n    FroalaEditorDirective.prototype.writeValue =\n        // Form model content changed.\n        function (content) {\n            this.updateEditor(content);\n        };\n    FroalaEditorDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    FroalaEditorDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    Object.defineProperty(FroalaEditorDirective.prototype, \"froalaEditor\", {\n        set: \n        // End ControlValueAccesor methods.\n        // froalaEditor directive as input: store the editor options\n        function (opts) {\n            this._opts = opts || this._opts;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FroalaEditorDirective.prototype, \"froalaModel\", {\n        set: \n        // froalaModel directive as input: store initial editor content\n        function (content) {\n            this.updateEditor(content);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Update editor with model contents.\n    // Update editor with model contents.\n    FroalaEditorDirective.prototype.updateEditor =\n        // Update editor with model contents.\n        function (content) {\n            if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n                return;\n            }\n            this._oldModel = content;\n            if (this._editorInitialized) {\n                this._$element.froalaEditor('html.set', content);\n            }\n            else {\n                this._$element.html(content);\n            }\n        };\n    // update model if editor contentChanged\n    // update model if editor contentChanged\n    FroalaEditorDirective.prototype.updateModel =\n        // update model if editor contentChanged\n        function () {\n            var _this = this;\n            this.zone.run(function () {\n                var modelContent = null;\n                if (_this._hasSpecialTag) {\n                    var attributeNodes = _this._$element[0].attributes;\n                    var attrs = {};\n                    for (var i = 0; i < attributeNodes.length; i++) {\n                        var attrName = attributeNodes[i].name;\n                        if (_this._opts.angularIgnoreAttrs && _this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n                            continue;\n                        }\n                        attrs[attrName] = attributeNodes[i].value;\n                    }\n                    if (_this._$element[0].innerHTML) {\n                        attrs[_this.INNER_HTML_ATTR] = _this._$element[0].innerHTML;\n                    }\n                    modelContent = attrs;\n                }\n                else {\n                    var returnedHtml = _this._$element.froalaEditor('html.get');\n                    if (typeof returnedHtml === 'string') {\n                        modelContent = returnedHtml;\n                    }\n                }\n                _this._oldModel = modelContent;\n                // Update froalaModel.\n                // Update froalaModel.\n                _this.froalaModelChange.emit(modelContent);\n                // Update form model.\n                // Update form model.\n                _this.onChange(modelContent);\n            });\n        };\n    // register event on jquery element\n    // register event on jquery element\n    FroalaEditorDirective.prototype.registerEvent =\n        // register event on jquery element\n        function (element, eventName, callback) {\n            if (!element || !eventName || !callback) {\n                return;\n            }\n            this._listeningEvents.push(eventName);\n            element.on(eventName, callback);\n        };\n    FroalaEditorDirective.prototype.initListeners = function () {\n        var self = this;\n        // bind contentChange and keyup event to froalaModel\n        this.registerEvent(this._$element, 'froalaEditor.contentChanged', function () {\n            setTimeout(function () {\n                self.updateModel();\n            }, 0);\n        });\n        if (this._opts.immediateAngularModelUpdate) {\n            this.registerEvent(this._editor, 'keyup', function () {\n                setTimeout(function () {\n                    self.updateModel();\n                }, 0);\n            });\n        }\n    };\n    // register events from editor options\n    // register events from editor options\n    FroalaEditorDirective.prototype.registerFroalaEvents =\n        // register events from editor options\n        function () {\n            if (!this._opts.events) {\n                return;\n            }\n            for (var eventName in this._opts.events) {\n                if (this._opts.events.hasOwnProperty(eventName)) {\n                    this.registerEvent(this._$element, eventName, this._opts.events[eventName]);\n                }\n            }\n        };\n    FroalaEditorDirective.prototype.createEditor = function () {\n        var _this = this;\n        if (this._editorInitialized) {\n            return;\n        }\n        this.setContent(true);\n        // Registering events before initializing the editor will bind the initialized event correctly.\n        this.registerFroalaEvents();\n        this.initListeners();\n        // init editor\n        this.zone.runOutsideAngular(function () {\n            _this._$element.on('froalaEditor.initialized', function () {\n                _this._editorInitialized = true;\n            });\n            _this._editor = _this._$element.froalaEditor(_this._opts).data('froala.editor').$el;\n        });\n    };\n    FroalaEditorDirective.prototype.setHtml = function () {\n        this._$element.froalaEditor('html.set', this._model || '', true);\n        // This will reset the undo stack everytime the model changes externally. Can we fix this?\n        this._$element.froalaEditor('undo.reset');\n        this._$element.froalaEditor('undo.saveStep');\n    };\n    FroalaEditorDirective.prototype.setContent = function (firstTime) {\n        if (firstTime === void 0) {\n            firstTime = false;\n        }\n        var self = this;\n        // Set initial content\n        if (this._model || this._model == '') {\n            this._oldModel = this._model;\n            if (this._hasSpecialTag) {\n                var tags = this._model;\n                // add tags on element\n                if (tags) {\n                    for (var attr in tags) {\n                        if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n                            this._$element.attr(attr, tags[attr]);\n                        }\n                    }\n                    if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n                        this._$element[0].innerHTML = tags[this.INNER_HTML_ATTR];\n                    }\n                }\n            }\n            else {\n                if (firstTime) {\n                    this.registerEvent(this._$element, 'froalaEditor.initialized', function () {\n                        self.setHtml();\n                    });\n                }\n                else {\n                    self.setHtml();\n                }\n            }\n        }\n    };\n    FroalaEditorDirective.prototype.destroyEditor = function () {\n        if (this._editorInitialized) {\n            this._$element.off(this._listeningEvents.join(\" \"));\n            this._editor.off('keyup');\n            this._$element.froalaEditor('destroy');\n            this._listeningEvents.length = 0;\n            this._editorInitialized = false;\n        }\n    };\n    FroalaEditorDirective.prototype.getEditor = function () {\n        if (this._$element) {\n            return this._$element.froalaEditor.bind(this._$element);\n        }\n        return null;\n    };\n    // send manual editor initialization\n    // send manual editor initialization\n    FroalaEditorDirective.prototype.generateManualController =\n        // send manual editor initialization\n        function () {\n            var self = this;\n            var controls = {\n                initialize: this.createEditor.bind(this),\n                destroy: this.destroyEditor.bind(this),\n                getEditor: this.getEditor.bind(this),\n            };\n            this.froalaInit.emit(controls);\n        };\n    // TODO not sure if ngOnInit is executed after @inputs\n    // TODO not sure if ngOnInit is executed after @inputs\n    FroalaEditorDirective.prototype.ngOnInit =\n        // TODO not sure if ngOnInit is executed after @inputs\n        function () {\n            // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n            if (!this.froalaInit.observers.length) {\n                this.createEditor();\n            }\n            else {\n                this.generateManualController();\n            }\n        };\n    FroalaEditorDirective.prototype.ngOnDestroy = function () {\n        this.destroyEditor();\n    };\n    return FroalaEditorDirective;\n}());\nexport { FroalaEditorDirective };\n//# sourceMappingURL=editor.directive.js.map\n",null]}